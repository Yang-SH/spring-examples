#   因为下面配置了数据库连接信息，所以spring boot会自动在容器中创建datasource对象
#   数据库地址
spring.datasource.url=jdbc:mysql://172.16.12.177:3306/test?characterEncoding=utf-8
#   数据库驱动
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
#   用户名
spring.datasource.username=root
#   密码
spring.datasource.password=root

#   数据库连接池配置
#   连接池类型
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
#最大活跃数
spring.datasource.maxActive=20
#初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时
spring.datasource.initialSize=1
#获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
spring.datasource.maxWait=60000
#是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。
#在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。5.5及以上版本有PSCache，建议开启。
#打开PSCache，并且指定每个连接PSCache的大小
spring.datasource.poolPreparedStatements=true
#要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。
#在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
#通过connectionProperties属性来打开mergeSql功能；慢SQL记录
#connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
spring.datasource.minIdle=1
#有两个含义：1) Destroy线程会检测连接的间隔时间;2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明
spring.datasource.timeBetweenEvictionRunsMillis=60000
#配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis=300000
#用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。
spring.datasource.validationQuery=SELECT 1 FROM DUAL
#建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
spring.datasource.testWhileIdle=true
#申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
spring.datasource.testOnBorrow=false
#归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
spring.datasource.testOnReturn=false
#属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：监控统计用的filter:stat;日志用的filter:log4j;防御sql注入的filter:wall
#配置监控统计拦截的filters，去掉后监控界面sql将无法统计,'wall'用于防火墙
spring.datasource.filters=stat,wall,log4j

#   jpa相关配置，同理这里springboot也会自动配置jpa的对象
spring.jpa.database=MySQL
#   显示sql语句
spring.jpa.show-sql=true
#   格式化sql
spring.jpa.properties.hibernate.format_sql=true
#   方言
spring.jpa.hibernate.naming.strategy=org.hibernate.cfg.ImprovedNamingStrategy